using Spark.Connect.Dotnet.ML.Param;
using Spark.Connect.Dotnet.Sql;

namespace Spark.Connect.Dotnet.ML.Classification;


/// <summary>
///Naive Bayes Classifiers. It supports both Multinomial and Bernoulli NB. Multinomial NB can handle finitely supported discrete data. For example, by converting documents into
///TF-IDF vectors, it can be used for document classification. By making every vector a binary (0/1) data, it can also be used as Bernoulli NB.The input feature values for 
/// Multinomial NB and Bernoulli NB must be nonnegative. Since 3.0.0, it supports Complement NB which is an adaptation of the Multinomial NB. Specifically, Complement NB 
///uses statistics from the complement of each class to compute the model’s coefficients. The inventors of Complement NB show empirically that the parameter estimates 
///for CNB are more stable than those for Multinomial NB. Like Multinomial NB, the input feature values for Complement NB must be nonnegative. Since 3.0.0, it also 
///supports Gaussian NB. which can handle continuous data.
/// </summary>
public class NaiveBayesModel(string uid, ObjectRef objRef, SparkSession sparkSession, ParamMap paramMap)
    : Model(uid, ClassName, objRef, sparkSession, paramMap)
{
    private const string ClassName = "org.apache.spark.ml.classification.NaiveBayesModel";

    /// <summary>
    /// Load a `NaiveBayesModel` that was previously saved to disk on the Spark Connect server
    /// </summary>
    /// <param name="path">Where to read the `NaiveBayesModel` from</param>
    /// <param name="sparkSession">A `SparkSession` to read the model through</param>
    /// <returns>`NaiveBayesModel`</returns>
    public static NaiveBayesModel Load(string path, SparkSession sparkSession)
    {
        var mlResult = Transformer.Load(path, sparkSession, ClassName);
        var paramMap = ParamMap.FromMLOperatorParams(mlResult.OperatorInfo.Params.Params, NaiveBayes.DefaultParams.Clone());
        
        var loadedModel = new NaiveBayesModel(mlResult.OperatorInfo.Uid, mlResult.OperatorInfo.ObjRef, sparkSession, paramMap);
        
        return loadedModel;
    }
    
    
    /// <summary>
    /// Sets the column name for features in the dataset.
    /// </summary>
    /// <param name="featuresCol">The name of the column containing feature vectors.</param>
    public void SetFeaturesCol(string featuresCol) => ParamMap.Add("featuresCol", featuresCol);

    /// <summary>
    /// Gets the name of the features column used in the Naive Bayes model.
    /// </summary>
    /// <returns>The name of the features column as a string.</returns>
    public string GetFeaturesCol() => ParamMap.Get("featuresCol").Value;

    /// <summary>
    /// Sets the name of the column used as the label in the dataset
    /// </summary>
    /// <param name="labelCol">The name of the column to set as the label</param>
    public void SetLabelCol(string labelCol) => ParamMap.Add("labelCol", labelCol);

    /// <summary>
    /// Gets the name of the label column used for training and predictions.
    /// </summary>
    /// <returns>A string representing the name of the label column.</returns>
    public string GetLabelCol() => ParamMap.Get("labelCol").Value;

    /// <summary>
    /// Sets the name of the column for predicted labels in the output DataFrame.
    /// </summary>
    /// <param name="predictionCol">The name of the column to store the predicted labels.</param>
    public void SetPredictionCol(string predictionCol) => ParamMap.Add("predictionCol", predictionCol);

    /// <summary>
    /// Gets the name of the column where predictions are stored.
    /// </summary>
    /// <returns>The name of the prediction column.</returns>
    public string GetPredictionCol() => ParamMap.Get("predictionCol").Value;

    /// <summary>
    /// Sets the name of the column where the predicted class probabilities will be stored
    /// </summary>
    /// <param name="probabilityCol">The name of the column for predicted probabilities</param>
    public void SetProbabilityCol(string probabilityCol) => ParamMap.Add("probabilityCol", probabilityCol);

    /// <summary>
    /// Gets the name of the column that stores the predicted class probabilities.
    /// </summary>
    /// <returns>The name of the column specified for storing predicted probabilities.</returns>
    public string GetProbabilityCol() => ParamMap.Get("probabilityCol").Value;

    /// <summary>
    /// Sets the name of the column that holds raw prediction (confidence) scores for each class.
    /// </summary>
    /// <param name="rawPredictionCol">The name of the column to store raw prediction scores.</param>
    public void SetRawPredictionCol(string rawPredictionCol) => ParamMap.Add("rawPredictionCol", rawPredictionCol);

    /// <summary>
    /// Gets the column name for the raw prediction output generated by the model.
    /// </summary>
    /// <returns>The name of the raw prediction column.</returns>
    public string GetRawPredictionCol() => ParamMap.Get("rawPredictionCol").Value;

    /// <summary>
    /// Set the value of the smoothing parameter for the Naive Bayes model.
    /// </summary>
    /// <param name="smoothing">The smoothing parameter to avoid zero probabilities in the calculation of conditional probabilities.</param>
    public void SetSmoothing(float smoothing) => ParamMap.Add("smoothing", smoothing);

    /// <summary>
    /// Retrieve the smoothing parameter used for the Naive Bayes model.
    /// </summary>
    /// <returns>The smoothing value as a floating-point number.</returns>
    public float GetSmoothing() => ParamMap.Get("smoothing").Value;

    /// <summary>
    /// Set the model type for the `NaiveBayes` algorithm. The available options are "multinomial" and "bernoulli".
    /// </summary>
    /// <param name="modelType">Specifies the model type for the algorithm. Supported values are "multinomial" and "bernoulli".</param>
    public void SetModelType(string modelType) => ParamMap.Add("modelType", modelType);

    /// <summary>
    /// Gets the type of the model represented in the current `NaiveBayes` instance.
    /// </summary>
    /// <returns>The model type as a string, typically "multinomial" or a user-defined value.</returns>
    public string GetModelType() => ParamMap.Get("modelType").Value;

    /// <summary>
    /// Set the value of the thresholds for the model.
    /// </summary>
    /// <param name="thresholds">An array of threshold values that specify the probability cutoffs for each class.</param>
    public void SetThresholds(float[] thresholds) => ParamMap.Add("thresholds", thresholds);

    /// <summary>
    /// Retrieve the thresholds used to convert probabilities into predictions
    /// </summary>
    /// <returns>Array of thresholds</returns>
    public float[] GetThresholds() => ParamMap.Get("thresholds").Value;

    /// <summary>
    /// Sets the name of the column that specifies the weights of the instances in the dataset.
    /// </summary>
    /// <param name="weightCol">The name of the column that contains instance weights.</param>
    public void SetWeightCol(string weightCol) => ParamMap.Add("weightCol", weightCol);

    /// <summary>
    /// Retrieves the name of the column used as weights in model training.
    /// </summary>
    /// <returns>The name of the weight column.</returns>
    public string GetWeightCol() => ParamMap.Get("weightCol").Value;
}

/// <summary>
///Naive Bayes Classifiers. It supports both Multinomial and Bernoulli NB. Multinomial NB can handle finitely supported discrete data. For example, by converting documents into
///TF-IDF vectors, it can be used for document classification. By making every vector a binary (0/1) data, it can also be used as Bernoulli NB.The input feature values for 
///    Multinomial NB and Bernoulli NB must be nonnegative. Since 3.0.0, it supports Complement NB which is an adaptation of the Multinomial NB. Specifically, Complement NB 
///uses statistics from the complement of each class to compute the model’s coefficients. The inventors of Complement NB show empirically that the parameter estimates 
///for CNB are more stable than those for Multinomial NB. Like Multinomial NB, the input feature values for Complement NB must be nonnegative. Since 3.0.0, it also 
///supports Gaussian NB. which can handle continuous data.
/// </summary>
public class NaiveBayes() : Estimator<NaiveBayesModel>( IdentifiableHelper.RandomUID("nb-static"), "org.apache.spark.ml.classification.NaiveBayes", DefaultParams)
{
    public static readonly ParamMap DefaultParams = new(
    [
            new("featuresCol", "features"), 
            new("labelCol", "label"), 
            new("predictionCol", "prediction"), 
            new("probabilityCol", "probability"), 
            new("rawPredictionCol", "rawPrediction"), 
            new("smoothing", 1.0F), 
            new("modelType", "multinomial"), 
            new("thresholds", new float[]{}),
            new("weightCol", ""),
    ]);

    /// <summary>
    /// Sets the column name for features in the dataset.
    /// </summary>
    /// <param name="featuresCol">The name of the column containing feature vectors.</param>
    public void SetFeaturesCol(string featuresCol) => ParamMap.Add("featuresCol", featuresCol);

    /// <summary>
    /// Gets the name of the features column used in the Naive Bayes model.
    /// </summary>
    /// <returns>The name of the features column as a string.</returns>
    public string GetFeaturesCol() => ParamMap.Get("featuresCol").Value;

    /// <summary>
    /// Sets the name of the column used as the label in the dataset
    /// </summary>
    /// <param name="labelCol">The name of the column to set as the label</param>
    public void SetLabelCol(string labelCol) => ParamMap.Add("labelCol", labelCol);

    /// <summary>
    /// Gets the name of the label column used for training and predictions.
    /// </summary>
    /// <returns>A string representing the name of the label column.</returns>
    public string GetLabelCol() => ParamMap.Get("labelCol").Value;

    /// <summary>
    /// Sets the name of the column for predicted labels in the output DataFrame.
    /// </summary>
    /// <param name="predictionCol">The name of the column to store the predicted labels.</param>
    public void SetPredictionCol(string predictionCol) => ParamMap.Add("predictionCol", predictionCol);

    /// <summary>
    /// Gets the name of the column where predictions are stored.
    /// </summary>
    /// <returns>The name of the prediction column.</returns>
    public string GetPredictionCol() => ParamMap.Get("predictionCol").Value;

    /// <summary>
    /// Sets the name of the column where the predicted class probabilities will be stored
    /// </summary>
    /// <param name="probabilityCol">The name of the column for predicted probabilities</param>
    public void SetProbabilityCol(string probabilityCol) => ParamMap.Add("probabilityCol", probabilityCol);

    /// <summary>
    /// Gets the name of the column that stores the predicted class probabilities.
    /// </summary>
    /// <returns>The name of the column specified for storing predicted probabilities.</returns>
    public string GetProbabilityCol() => ParamMap.Get("probabilityCol").Value;

    /// <summary>
    /// Sets the name of the column that holds raw prediction (confidence) scores for each class.
    /// </summary>
    /// <param name="rawPredictionCol">The name of the column to store raw prediction scores.</param>
    public void SetRawPredictionCol(string rawPredictionCol) => ParamMap.Add("rawPredictionCol", rawPredictionCol);

    /// <summary>
    /// Gets the column name for the raw prediction output generated by the model.
    /// </summary>
    /// <returns>The name of the raw prediction column.</returns>
    public string GetRawPredictionCol() => ParamMap.Get("rawPredictionCol").Value;

    /// <summary>
    /// Set the value of the smoothing parameter for the Naive Bayes model.
    /// </summary>
    /// <param name="smoothing">The smoothing parameter to avoid zero probabilities in the calculation of conditional probabilities.</param>
    public void SetSmoothing(float smoothing) => ParamMap.Add("smoothing", smoothing);

    /// <summary>
    /// Retrieve the smoothing parameter used for the Naive Bayes model.
    /// </summary>
    /// <returns>The smoothing value as a floating-point number.</returns>
    public float GetSmoothing() => ParamMap.Get("smoothing").Value;

    /// <summary>
    /// Set the model type for the `NaiveBayes` algorithm. The available options are "multinomial" and "bernoulli".
    /// </summary>
    /// <param name="modelType">Specifies the model type for the algorithm. Supported values are "multinomial" and "bernoulli".</param>
    public void SetModelType(string modelType) => ParamMap.Add("modelType", modelType);

    /// <summary>
    /// Gets the type of the model represented in the current `NaiveBayes` instance.
    /// </summary>
    /// <returns>The model type as a string, typically "multinomial" or a user-defined value.</returns>
    public string GetModelType() => ParamMap.Get("modelType").Value;

    /// <summary>
    /// Set the value of the thresholds for the model.
    /// </summary>
    /// <param name="thresholds">An array of threshold values that specify the probability cutoffs for each class.</param>
    public void SetThresholds(float[] thresholds) => ParamMap.Add("thresholds", thresholds);

    /// <summary>
    /// Retrieve the thresholds used to convert probabilities into predictions
    /// </summary>
    /// <returns>Array of thresholds</returns>
    public float[] GetThresholds() => ParamMap.Get("thresholds").Value;

    /// <summary>
    /// Sets the name of the column that specifies the weights of the instances in the dataset.
    /// </summary>
    /// <param name="weightCol">The name of the column that contains instance weights.</param>
    public void SetWeightCol(string weightCol) => ParamMap.Add("weightCol", weightCol);

    /// <summary>
    /// Retrieves the name of the column used as weights in model training.
    /// </summary>
    /// <returns>The name of the weight column.</returns>
    public string GetWeightCol() => ParamMap.Get("weightCol").Value;
}