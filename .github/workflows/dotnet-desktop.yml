name: .NET Core Desktop

on:
  push:
    branches: [ "feature/*", "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: ubuntu-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Spark.Connect.Dotnet                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src/test                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0'  # Specify your .NET Core version here
    
    - name: Print current directory
      run: pwd

    - name: Print current directory listing
      run: ls -a ./src

    
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: temurin
    
    - uses: vemonet/setup-spark@v1
      with:
        spark-version: '3.5.1'
        hadoop-version: '3'
    
    - run: $SPARK_HOME/sbin/start-connect-server.sh --packages org.apache.spark:spark-connect_2.12:3.5.1
    
    - name: Install dependencies
      working-directory: ./src/Spark.Connect.Dotnet/
      run: dotnet restore

    - name: Build the project
      working-directory: ./src/Spark.Connect.Dotnet/
      run: dotnet build --configuration Release --no-restore


    # Execute all unit tests in the solution
    - name: Execute unit tests
      working-directory: ./src/test/Spark.Connect.Dotnet.Tests/
      run: dotnet test -- xunit.parallelizeAssembly=true --configuration Release --no-build

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

  
    # # Remove the pfx
    # - name: Remove the pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
